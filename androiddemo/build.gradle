apply plugin: 'com.android.application'

// kotlin 插件
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

////////////////////////////////////////// gradle插件

// 应用自己的插件
apply plugin: 'com.imooc.router'

// 向路由插件传递参数
router {
    wikiDir getRootDir().absolutePath
}

////////////////////////////////////////// gradle插件

////////////////////////////////////////// 获取 local.properties 参数

Properties properties = new Properties()
properties.load(project.rootProject.file("local.properties").newDataInputStream())

def KEY_ALIAS = properties.getProperty('KEY_ALIAS')
def KEY_PASSWORD = properties.getProperty('KEY_PASSWORD')
def STORE_PASSWORD = properties.getProperty('STORE_PASSWORD')

println("KEY_ALIAS = $KEY_ALIAS, KEY_PASSWORD = $KEY_PASSWORD, STORE_PASSWORD = $STORE_PASSWORD")

////////////////////////////////////////// 获取 local.properties 参数

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.1"

    defaultConfig {
        applicationId "com.watayouxiang.androiddemo"
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }

    signingConfigs {
        release {
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
            storeFile file('../wt_apkkey/test_wt666.key')
            storePassword STORE_PASSWORD
        }
    }

    // 构建类型
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.release
        }
    }

    /*

    $ cd /Users/TaoWang/Library/Android/sdk/build-tools/30.0.1

    // 查看AndroidManifest.xml是否插入了渠道
    // apk的绝对路径：/Users/TaoWang/Documents/Code/github/Android/androiddemo/build/outputs/apk/huawei/release/androiddemo-huawei-release.apk
    $ ./aapt dump xmltree [apk的绝对路径] AndroidManifest.xml

     */

    // 产品维度
    flavorDimensions "channel"
    // 产品风味
    productFlavors {
        huawei {
            manifestPlaceholders = [MTA_CHANNEL_VALUE: "huawei"]
        }
        xiaomi {
            manifestPlaceholders = [MTA_CHANNEL_VALUE: "baidu"]
        }
    }

    // 修改apk名字
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (variant.buildType.name.equals('release')) {
                // ${variant.productFlavors[0].name} 渠道名称
                // ${defaultConfig.versionName} 版本号
                def fileName = "Demo_${variant.productFlavors[0].name}_${defaultConfig.versionName}.apk"
                output.outputFileName = fileName
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    compile files('libs/nineoldandroids.jar')

    implementation APP_COMPAT
    implementation MATERIAL
    implementation CONSTRAINT_LAYOUT

    implementation 'com.blankj:utilcodex:1.30.5'
    implementation 'com.watayouxiang:DemoShell:1.0.8'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.72'
    implementation 'androidx.core:core-ktx:1.3.2'

    implementation 'androidx.multidex:multidex:2.0.0'

    implementation project(':androidutils')
    implementation project(':router-runtime')

    ////////////////////////////////////////// APT

//    // 依赖自己的注解
//    implementation project(':router-annotations')
//    // 依赖自己的注解处理器
//    annotationProcessor project(':router-processor')

//    implementation 'com.imooc.router:router-annotations:1.0.0'
//    annotationProcessor 'com.imooc.router:router-processor:1.0.0'

    implementation project(':router-annotations')
    // 搜集 java的注解 和 kotlin的注解
    kapt project(':router-processor')

    /**
     * 测试注解处理器
     *
     * 异常处理：Mac OS 升级到11.0.1后 ./gradlew :androiddemo:assembleDebug -q 编译项目出错
     * 资源库中找到 Internet Plug-Ins 文件夹，将文件夹名改为 InternetPlug-Ins
     * 参考：https://www.jianshu.com/p/3c1ad32a1def
     *
     * 注意：com.imooc.router.processor.DestinationProcessor 类中的日志，仅在第一次编译时打印.
     *      如果需要再次打印，需要先清楚缓存 ./gradlew clean -q
     *
     * // 1、清除缓存
     * $ ./gradlew clean -q
     *
     * // 2、开始debug编译
     * $ ./gradlew :androiddemo:assembleDebug -q
     *
     * //3、查看生成文件
     * 生成的 RouterMapping_xxx.java 文件在:
     * module 的 build/generated/ap_generated_sources/out/${packagename} 目录下
     */
}

// 限制依赖库的使用
// $ ./gradlew :androiddemo:assembleDebug
//configurations.all {
//    resolutionStrategy.eachDependency { detail ->
//        String dependency = detail.requested.toString()
//        if (dependency.contains("com.blankj:utilcodex:1.30.5")) {
//            throw new RuntimeException("不允许使用 $dependency")
//        }
//    }
//}